<div class="container" id="configurador">
  <header class="page__header row">
    <h1 class="page__title heading h1 col-12">{{ page.title }}</h1>
  </header>

  <div class="page__content rte">
    {{ page.content }}
    
    <div class="form__input-row row mt-5 mb-4">
      <div class="form__input-wrapper col-12 col-md-4 mb-4 mb-md-0">
        <div class="select-wrapper select-wrapper--primary">
          <select name="marca" id="cruz_brands" class="configurador-input">
            <option value="">Marca do Veículo</option>
          </select>
        </div>
      </div>

      <div class="form__input-wrapper col-12 col-md-4" style="display: block;">
        <div class="select-wrapper select-wrapper--primary">
          <select name="modelo" id="cruz_models" class="configurador-input">
            <option value="">Modelo do Veículo</option>
          </select>
        </div>
      </div>

      <div class="form__input-wrapper col-12 col-md-4" style="display: block;">
        <div class="select-wrapper select-wrapper--primary">
          <select name="modelo" id="cruz_bodies" class="configurador-input">
            <option value="">Escolha uma Viatura</option>
          </select>
        </div>
      </div>

      <div id="cruz_solutions"></div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", async function () {
    const endpoint = "https://macos.apps.bydas.com/";
    
    const brandsInput = document.getElementById("cruz_brands");
    const modelsInput = document.getElementById("cruz_models");
    const bodiesInput = document.getElementById("cruz_bodies");
    const solutionsElement = document.getElementById("cruz_solutions");

    if (!brandsInput || !modelsInput || !bodiesInput) return;
    
    let brands = [];
    let models = [];
    let bodies = [];
    let solutions = [];
    
    const getData = async (action, data, request, secondRequest) => {
      await fetch(`${endpoint}?action=${action}`, {
        headers: { "Content-Type": "application/json" }
      })
        .then((res) => {
          if (!res.ok) {
            console.error("Couldn't fetch " + action);
            return null;
          }
  
          return res.json();
        })
        .then((actionData) => {        
          const fetchDataRequest = secondRequest ? actionData[request] : actionData[request][secondRequest];
          
          if (actionData && fetchDataRequest) {
            if (request === "brands") {
              brands.length = 0;
              models.length = 0;
              bodies.length = 0;
            } else if (request === "models") {
              models.length = 0;
              bodies.length = 0;
            } else {
              bodies.length = 0;
            }
            
            data.push(...fetchDataRequest);
          }
        })
        .catch((error) => console.error(error))
    }

    await getData("cruz_brands", brands, "brands");
    
    if (brandsInput) {
      for (const brand of brands) {
        const brandOption = document.createElement("option");
        brandOption.value = brand.IdBrand;
        brandOption.innerText = brand.Brand;
        
        brandsInput.appendChild(brandOption);
      }
    }

    brandsInput.addEventListener("change", async function (e) {
      const brandId = e.target.value;
      
      if (brandId) {
        await getData(`cruz_models&IdBrand=${brandId}`, models, "models"); 

        if (modelsInput) {
          const bodyOptions = bodiesInput.querySelectorAll("option");

          for (const bodyOption of bodyOptions) {
            if (bodyOption.value) bodyOption.remove();
          }
          
          const modelOptions = modelsInput.querySelectorAll("option");
  
          for (const modelOption of modelOptions) {
            if (modelOption.value) modelOption.remove();
          }
          
          for (const model of models) {
            const modelOption = document.createElement("option");
            modelOption.value = model.Model;
            modelOption.innerText = model.Model;
            
            modelsInput.appendChild(modelOption);
          }
        }
      } else {
        const bodyOptions = bodiesInput.querySelectorAll("option");

        for (const bodyOption of bodyOptions) {
          if (bodyOption.value) bodyOption.remove();
        }
        
        const modelOptions = modelsInput.querySelectorAll("option");

        for (const modelOption of modelOptions) {
          if (modelOption.value) modelOption.remove();
        }
      }
    }); 

    modelsInput.addEventListener("change", async function (e) {
      const brandId = brandsInput.value;
      const modelId = e.target.value;
      
      if (brandId && modelId) {
        await getData(`cruz_bodies&IdBrand=${brandId}&Model=${modelId}`, bodies, "bodies"); 

        if (bodiesInput) {
          const bodyOptions = bodiesInput.querySelectorAll("option");

          for (const bodyOption of bodyOptions) {
            if (bodyOption.value) bodyOption.remove();
          }
          
          for (const body of bodies) {
            const bodyOption = document.createElement("option");
            bodyOption.value = body.IdVeh;
            bodyOption.innerText = body.Body;
            
            bodiesInput.appendChild(bodyOption);
          }
        }
      } else {
        const bodyOptions = bodiesInput.querySelectorAll("option");

        for (const bodyOption of bodyOptions) {
          if (bodyOption.value) bodyOption.remove();
        }
      }
    });

    bodiesInput.addEventListener("change", async function (e) {
      const bodyId = e.target.value;
      
      if (bodyId) {
        await getData(`cruz_solutions&IdVeh=${bodyId}`, solutions, "vehicles"); 

        if (solutionsElement) {
          for (const solution of solutions) {
            const solutionCardHTML = `{% render 'card-product-custom' card_product: solution %}`;

            const wrapper = document.createElement('div');
            wrapper.innerHTML = solutionCardHTML;

            const solutionCard = wrapper.firstElementChild;
            solutionsElement.appendChild(solutionCard);
          }
        }
      }
    });
  });
</script>
