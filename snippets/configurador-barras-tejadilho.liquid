{% style %}
  #cruz_solutions {
    display: grid;
    grid-auto-rows: max-content;
    grid-auto-flow: row;
    gap: 2rem;
    margin-top: 4rem;
  }
  
  #cruz_solutions > div {
    display: grid;
    grid-template-rows: repeat(2, max-content);
  }

  .spinnerConfig {
    display: none;
    width: 30px;
    height: 30px;
    border: 3px solid white;
    border-top-color: orange;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 4rem auto 0;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  
{% endstyle %}

<div class="container" id="configurador">
  <header class="page__header row">
    <h1 class="page__title heading h1 col-12">{{ page.title }}</h1>
  </header>

  <div class="page__content rte">
    {{ page.content }}

    <div class="form__input-row row mt-5 mb-4">
      <div class="form__input-wrapper col-12 col-md-4 mb-4 mb-md-0">
        <div class="select-wrapper select-wrapper--primary">
          <select name="marca" id="cruz_brands" class="configurador-input">
            <option value="">Marca do Veículo</option>
          </select>
        </div>
      </div>

      <div class="form__input-wrapper col-12 col-md-4 mb-4 mb-md-0" style="display: block;">
        <div class="select-wrapper select-wrapper--primary">
          <select name="modelo" id="cruz_models" class="configurador-input">
            <option value="">Modelo do Veículo</option>
          </select>
        </div>
      </div>

      <div class="form__input-wrapper col-12 col-md-4" style="display: block;">
        <div class="select-wrapper select-wrapper--primary">
          <select name="modelo" id="cruz_bodies" class="configurador-input">
            <option value="">Escolha uma Viatura</option>
          </select>
        </div>
      </div>

      <div class="spinnerConfig"></div>
      <div id="cruz_solutions"></div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", async function () {
    const endpoint = "https://macos.apps.bydas.com/";
    
    const brandsInput = document.getElementById("cruz_brands");
    const modelsInput = document.getElementById("cruz_models");
    const bodiesInput = document.getElementById("cruz_bodies");
    const solutionsElement = document.getElementById("cruz_solutions");
    const spinnerConfig = document.querySelector(".spinnerConfig");
    
    if (!brandsInput || !modelsInput || !bodiesInput) return;
    
    let brands = [];
    let models = [];
    let bodies = [];
    let solutions = [];
    
    const getData = async (action, data, request) => {
      await fetch(`${endpoint}?action=${action}`, {
        headers: { "Content-Type": "application/json" }
      })
        .then((res) => {
          if (!res.ok) {
            console.error("Couldn't fetch " + action);
            return null;
          }
  
          return res.json();
        })
        .then((actionData) => {                  
          if (actionData && actionData[request]) {
            if (request === "brands") {
              brands.length = 0;
              models.length = 0;
              bodies.length = 0;
              solutions.length = 0;
            } else if (request === "models") {
              models.length = 0;
              bodies.length = 0;
              solutions.length = 0;
            } else {
              bodies.length = 0;
              solutions.length = 0;
            }
            
            data.push(...actionData[request]);
          }
        })
        .catch((error) => console.error(error))
    }

    await getData("cruz_brands", brands, "brands");
    
    if (brandsInput) {
      for (const brand of brands) {
        const brandOption = document.createElement("option");
        brandOption.value = brand.IdBrand;
        brandOption.innerText = brand.Brand;
        
        brandsInput.appendChild(brandOption);
      }
    }

    brandsInput.addEventListener("change", async function (e) {
      const brandId = e.target.value;
      
      if (brandId) {
        await getData(`cruz_models&IdBrand=${brandId}`, models, "models"); 

        if (modelsInput) {
          const bodyOptions = bodiesInput.querySelectorAll("option");

          const solutionsElements = solutionsElement.querySelectorAll("div");

          for (const solutionResult of solutionsElements) {
            solutionResult.remove();
          }

          for (const bodyOption of bodyOptions) {
            if (bodyOption.value) bodyOption.remove();
          }
          
          const modelOptions = modelsInput.querySelectorAll("option");
  
          for (const modelOption of modelOptions) {
            if (modelOption.value) modelOption.remove();
          }
          
          for (const model of models) {
            const modelOption = document.createElement("option");
            modelOption.value = model.Model;
            modelOption.innerText = model.Model;
            
            modelsInput.appendChild(modelOption);
          }
        }
      } else {
        const bodyOptions = bodiesInput.querySelectorAll("option");

        const solutionsElements = solutionsElement.querySelectorAll("div");

        for (const solutionResult of solutionsElements) {
          solutionResult.remove();
        }

        for (const bodyOption of bodyOptions) {
          if (bodyOption.value) bodyOption.remove();
        }
        
        const modelOptions = modelsInput.querySelectorAll("option");

        for (const modelOption of modelOptions) {
          if (modelOption.value) modelOption.remove();
        }
      }
    }); 

    modelsInput.addEventListener("change", async function (e) {
      const brandId = brandsInput.value;
      const modelId = e.target.value;
      
      if (brandId && modelId) {
        await getData(`cruz_bodies&IdBrand=${brandId}&Model=${modelId}`, bodies, "bodies"); 

        if (bodiesInput) {
          const bodyOptions = bodiesInput.querySelectorAll("option");

          const solutionsElements = solutionsElement.querySelectorAll("div");

          for (const solutionResult of solutionsElements) {
            solutionResult.remove();
          }

          for (const bodyOption of bodyOptions) {
            if (bodyOption.value) bodyOption.remove();
          }
          
          for (const body of bodies) {
            const bodyOption = document.createElement("option");
            bodyOption.value = body.IdVeh;
            bodyOption.innerText = body.Body;
            
            bodiesInput.appendChild(bodyOption);
          }
        }
      } else {
        const bodyOptions = bodiesInput.querySelectorAll("option");

        const solutionsElements = solutionsElement.querySelectorAll("div");

          for (const solutionResult of solutionsElements) {
            solutionResult.remove();
          }

        for (const bodyOption of bodyOptions) {
          if (bodyOption.value) bodyOption.remove();
        }
      }
    });

    bodiesInput.addEventListener("change", async function (e) {
      spinnerConfig.style.display = "block";
      
      const bodyId = e.target.value;
      
      if (bodyId) {
        const solutionsElements = solutionsElement.querySelectorAll("div");

        for (const solutionResult of solutionsElements) {
          solutionResult.remove();
        }
        
        await getData(`cruz_solutions&IdVeh=${bodyId}`, solutions, "vehicles"); 

        const solutionOptions = {};

        for (const solution of solutions) {
          const currentOption = solution.idOption;
          const optionProducts = solutions.filter((s) => s.idOption === currentOption);
          
          if (!solutionOptions[currentOption]) {
            solutionOptions[currentOption] = optionProducts;
          }
        }

        if (solutionsElement) {
          console.log(solutionOptions);
          
          Object.entries(solutionOptions).map(([key, value], index) => {
            const blockElement = document.createElement("div");
            blockElement.classList.add("card-configurador");
            const productsId = [];
            let totalPrice = 0;
            
            const blockTitle = document.createElement("h1");
            blockTitle.classList.add("card_title");
            blockTitle.innerText = `Opção ${index + 1} - ${value[0].solutionName}`;

            const blockFeatures = document.createElement("div");
            blockFeatures.classList.add("card_section", "card-barras-tejadilho");

            const optionImgContainer = document.createElement("div");
            optionImgContainer.classList.add("col-12", "col-lg-2");
            const optionImg = document.createElement("img");
            optionImg.setAttribute("src", value[0].optionImage);
            optionImg.setAttribute("alt", value[0].solutionName);
            optionImg.classList.add("option-image");
            optionImgContainer.appendChild(optionImg);
            
            const blockComponents = document.createElement("ul");
            blockComponents.classList.add("card-barras-content", "row", "col-12", "col-lg-8");

            const componentHeader = document.createElement("li");
            componentHeader.classList.add("component-header");
            const componentTitleLabel = document.createElement("h4");
            componentTitleLabel.innerText = "Componentes";
            const componentSKULabel = document.createElement("h4");
            componentSKULabel.innerText = "SKU";
            const componentPriceLabel = document.createElement("h4");
            componentPriceLabel.innerText = "Preço";
            const componentOptionalLabel = document.createElement("h4");
            componentOptionalLabel.innerText = "Opcional";
            componentHeader.append(componentTitleLabel, componentSKULabel, componentPriceLabel, componentOptionalLabel);
            
            const blockPriceContainer = document.createElement("div"); 
            blockPriceContainer.classList.add("barras-price-container","col-12", "col-sm-5", "col-lg-2");

            const totalPriceLabel = document.createElement("span");
            totalPriceLabel.innerText = "Total: "
            totalPriceLabel.style.fontWeight = "bold";
            
            const totalPriceElement = document.createElement("span");
            totalPriceElement.classList.add("total-price-barras");
            totalPriceElement.setAttribute("id", key);

            const priceWrapper = document.createElement("div");
            priceWrapper.classList.add("price-wrapper");
            priceWrapper.append(totalPriceLabel, totalPriceElement);
            
            const buyBtn = document.createElement("button");
            buyBtn.classList.add("button-configurador");
            buyBtn.innerText = "Adicionar";
            buyBtn.setAttribute("id", `btn-${key}`);

            buyBtn.addEventListener("click", function (e) {
              const finalProductsIds = e.target
                .getAttribute("data-products-id")
                .split(",")
                .map(id => id.trim());
            
              const items = finalProductsIds.map(id => ({
                id: Number(id),
                quantity: 1
              }));
              
              fetch("/cart/add.js", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ items })
              })
                .then(res => {
                  if (!res.ok) {
                    console.error("Falha ao adicionar ao carrinho");
                    return null;
                  }
                  
                  return res.json();
                })
                .then(cart => {
                  window.location.href = "/cart";
                })
                .catch(err => console.error(err));
            });

            [priceWrapper, buyBtn].forEach((el) => blockPriceContainer.appendChild(el));
            blockComponents.appendChild(componentHeader);
            [optionImgContainer, blockComponents, blockPriceContainer].forEach((el) => blockFeatures.appendChild(el));
            [blockTitle, blockFeatures].forEach((b) => blockElement.appendChild(b));

            solutionsElement.appendChild(blockElement);
            
            return value.map((s) => {
              const component = document.createElement("li");
              
              const title = document.createElement("h3");

              if (s?.pdf) {
                title.innerHTML = s.product.title + `<a href=${s.pdf} target="_blank">(Ver PDF)</a>`;
              } else {
                title.innerText = s.product.title; 
              }
              
              const sku = document.createElement("a");
              sku.innerText = s.sku;
              sku.href = `/products/${s.product.handle}`;

              const priceLabel = document.createElement("span");
              priceLabel.innerText = "Preço:"
              
              const price = document.createElement("span");

              if (window.customerLoggedIn) {
                price.innerText = s.price + "€";
              }

              const optional = document.createElement("input");
              optional.type = "checkbox";
              optional.classList.add("solution_optional");
              optional.checked = !s.optional;
              optional.disabled = !s.optional;
              optional.setAttribute("data-price", s.price);
              optional.setAttribute("data-solution", key);
              optional.setAttribute("data-products", `btn-${key}`);
              optional.setAttribute("data-id", s.id);

              [title, sku, price, optional].forEach((el) => component.appendChild(el));

              productsId.push(s.id);

              if (!s.optional) {
                totalPrice += Number(s.price);
                buyBtn.setAttribute("data-products-id", productsId.join(","));
              };

              if (window.customerLoggedIn) {
                totalPriceElement.innerText = `${totalPrice.toFixed(2)} €`;
              }
              
              blockComponents.appendChild(component);
            })
          });

          spinnerConfig.style.display = "none";
        }
      } else {
        const solutionsElements = solutionsElement.querySelectorAll("div");

        for (const solutionResult of solutionsElements) {
          solutionResult.remove();
        }
      }
    });

    solutionsElement.addEventListener("change", function (e) {
      const isOption = e.target.className === "solution_optional";

      if (isOption) {
        const optionPrice = Number(e.target.getAttribute("data-price"));
        const solutionPriceElement = solutionsElement.querySelector(`#${e.target.getAttribute("data-solution")}`);
        const buyBtnElement = solutionsElement.querySelector(`#${e.target.getAttribute("data-products")}`);

        if (e.target.checked) {
          buyBtnElement.setAttribute("data-products-id", buyBtnElement.getAttribute("data-products-id") + "," + e.target.getAttribute("data-id"));
          
          if (window.customerLoggedIn) {
            solutionPriceElement.innerText = `${(Number(solutionPriceElement.innerText.split("€")[0]) + optionPrice).toFixed(2)} €`;
          }
        } else {
          const newDataProductsId = buyBtnElement.getAttribute("data-products-id").replace("," + e.target.getAttribute("data-id"), "");
          
          buyBtnElement.setAttribute("data-products-id", newDataProductsId);

          if (window.customerLoggedIn) {
            solutionPriceElement.innerText = `${(Number(solutionPriceElement.innerText.split("€")[0]) - optionPrice).toFixed(2)} €`;
          }
        }
      }
    });
  });
</script>
