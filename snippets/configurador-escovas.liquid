<<<<<<< Updated upstream
<div class="container">
  <div class="row">
    <div class="col-12">
      <h1 class="custom-cruz-padding page-title">Configurador de Escovas Limpa Pára-brisas</h1>
      <div class="col-12">
        
        <hr>
        
        <div class="products-search-layout">
          <div>
            <label for="cars">Escolha uma marca:</label>
            <select name="brands" id="brands"></select>
          </div>
          <div style="margin-top: 24px">
            <label for="models">Escolha um modelo:</label>
            <select name="models" id="models"></select>
          </div>
          <div style="margin-top: 24px">
            <label for="vehicles">Escolha um ano:</label>
            <select name="vehicles" id="vehicles"></select>
          </div>
        </div>
          
        <div id="loading">
          A carregar...
        </div>
    
        <div id="product-list-container">
    
            <div id="products-list-2">
            </div>
          </div>
      </div>
    </div>
  </div>

  <div id="components"></div>
=======
<div class="container ">
  <header class="page__header page__header--centered">
    <h1 class="page__title heading h1">{{ page.title }}</h1>
  </header>

  <div class="page__content rte">
    {{ page.content }}
           <div class="form__input-row" id="form_input_stuff">
             <div class="form__input-wrapper">

               <div class="select-wrapper select-wrapper--primary"><select name="marca" id="marcadocarro" data-default="" required="" onChange="brandChanged(event)"><option value="">Marca do Veículo</option></select>
               </div>
             </div>

             <div class="form__input-wrapper" style="display: block;">

               <div class="select-wrapper select-wrapper--primary"><select name="modelo" id="modelodocarro" data-default="" onChange="modelChanged(event)"><option value=""> Modelo do Veículo</option></select>
               </div>
             </div>
             
            <div class="form__input-wrapper" style="display: block;">

               <div class="select-wrapper select-wrapper--primary"><select name="ano" id="anodocarro" data-default="" onChange="yearChanged(event)"><option value=""> Ano do Veículo</option></select>
               </div>
             </div>

             <div class="shipping-estimator__results rte" style="display: none;"></div>
           </div>           
            
            <div hidden id="optionClassic">
              <div class="card" id="btoptions">
                <div class="card__header" id="op1">
                  <h2 class="card__title heading h3" style="margin-bottom: 0px;">Opção Escovas Classic</h2>
                </div>
                <div id="opt1" class="card__section btoption justify-content-evenly" style="padding: 0px 20px 30px 20px;">
                  <img class="btoptioni" src="img0101">
                  <div class="btoptiont">
                    <table style="width: 512px;" class="tabbt">
                       <thead>
                        <tr valign="top">
                          <th style="width: 325px;"><b>Lado do Condutor</b></th>
                          <th style="width: 85px; text-align: center;"><b>Ref.</b></th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                          <td label="Acessórios">nome0</td>
                          <td label="Referência"><p style="text-align:center"><a target="_blank" href="/search?type=product&options[prefix]=last&options[unavailable_products]=last&q=skuskusku0">skuskusku0</a></p></td>
                        </tr>
                        <tr>
                          <td style="padding-top: 10px">Inclui o adaptador UFGC0 para aplicação<br> <img src="UFGI0"></td>
                          <td></td>
                        </tr>
                        </tbody>
                      </table>
                  </div>
                  <div class="btoptionprice">
                    <div class="btbox2">
                      <p style="margin-top:20px;"><span class="text--strong">Preço:</span><span class="btprice text--strong" style="color:#ff0000; float:right; font-size:20px;"> price1231230€</span></p>
                      <div style="text-align: center;">
                          <button type="submit" class="product-form__add-button button button--primary" data-action="add-to-cart" style="height:50px; font-size:14px;" onclick="handleBuy(0)">Adicionar ao carrinho1</button>
                      </div>
                    </div>
                  </div>
                </div>
              

                <div id="opt2" class="card__section btoption justify-content-evenly" style="padding: 0px 20px 30px 20px;">
                  <img class="btoptioni" src="img0102">
                  <div class="btoptiont">
                    <table style="width: 512px;" class="tabbt">
                       <thead>
                        <tr valign="top">
                          <th style="width: 325px;"><b>Lado do Passageiro</b></th>
                          <th style="width: 85px; text-align: center;"><b>Ref.</b></th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr style="padding-top: 10px">
                          <td label="Acessórios">nome1</td>
                          <td label="Referência"><p style="text-align:center"><a target="_blank" href="/search?type=product&options[prefix]=last&options[unavailable_products]=last&q=skuskusku1">skuskusku1</a></p></td>
                        </tr>
                        <tr>
                          <td>Inclui o adaptador UFGC1 para aplicação<br> <img src="UFGI1"></td>
                          <td></td>
                        </tr>
                        </tbody>
                      </table>
                  </div>
                  <div class="btoptionprice">
                    <div class="btbox2">
                      <p style="margin-top:20px;"><span class="text--strong">Preço:</span><span class="btprice text--strong" style="color:#ff0000; float:right; font-size:20px;"> price1231231€</span></p>
                      <div style="text-align: center;">
                          <button type="submit" class="product-form__add-button button button--primary" data-action="add-to-cart" style="height:50px; font-size:14px;" onclick="handleBuy(1)">Adicionar ao carrinho2</button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
             </div>
              
            <div hidden id="optionFlat">
              <div class="card" id="btoptions">
                <div class="card__header" id="op2">
                  <h2 class="card__title heading h3" style="margin-bottom: 0px;">Opção Escovas Flat</h2>
                </div>
                <div id="opt3" class="card__section btoption justify-content-evenly" style="padding: 0px 20px 30px 20px;">
                  <img class="btoptioni" src="img0101">
                  <div class="btoptiont">
                    <table style="width: 512px;" class="tabbt">
                       <thead>
                        <tr valign="top">
                          <th style="width: 325px;"><b>Lado do Condutor</b></th>
                          <th style="width: 85px; text-align: center;"><b>Ref.</b></th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr style="padding-top: 10px">
                          <td label="Acessórios">nome0</td>
                          <td label="Referência"><p style="text-align:center"><a target="_blank" href="/search?type=product&options[prefix]=last&options[unavailable_products]=last&q=skuskusku0">skuskusku0</a></p></td>
                        </tr>
                        <tr>
                          <td>Inclui o adaptador UFGC0 para aplicação<br> <img src="UFGI0"></td>
                          <td></td>
                        </tr>
                        </tbody>
                      </table>
                  </div>
                  <div class="btoptionprice">
                    <div class="btbox2">
                      <p style="margin-top:20px;"><span class="text--strong">Preço:</span><span class="btprice text--strong" style="color:#ff0000; float:right; font-size:20px;"> price1231230€</span></p>
                      <div style="text-align: center;">
                          <button type="submit" class="product-form__add-button button button--primary" data-action="add-to-cart" style="height:50px; font-size:14px;" onclick="handleBuy(2)">Adicionar ao carrinho1</button>
                      </div>
                    </div>
                  </div>
                </div>
              

                <div id="opt4" class="card__section btoption justify-content-evenly" style="padding: 0px 20px 30px 20px;">
                  <img class="btoptioni" src="img0102">
                  <div class="btoptiont">
                    <table style="width: 512px;" class="tabbt">
                       <thead>
                        <tr valign="top">
                          <th style="width: 325px;"><b>Lado do Passageiro</b></th>
                          <th style="width: 85px; text-align: center;"><b>Ref.</b></th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr style="padding-top: 10px">
                          <td label="Acessórios">nome1</td>
                          <td label="Referência"><p style="text-align:center"><a target="_blank" href="/search?type=product&options[prefix]=last&options[unavailable_products]=last&q=skuskusku1">skuskusku1</a></p></td>
                        </tr>
                        <tr>
                          <td>Inclui o adaptador UFGC1 para aplicação<br> <img src="UFGI1"></td>
                          <td></td>
                        </tr>
                        </tbody>
                      </table>
                  </div>
                  <div class="btoptionprice">
                    <div class="btbox2">
                      <p style="margin-top:20px;"><span class="text--strong">Preço:</span><span class="btprice text--strong" style="color:#ff0000; float:right; font-size:20px;"> price1231231€</span></p>
                      <div style="text-align: center;">
                          <button type="submit" class="product-form__add-button button button--primary" data-action="add-to-cart" style="height:50px; font-size:14px;" onclick="handleBuy(3)">Adicionar ao carrinho2</button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
             </div> 
   </div>
>>>>>>> Stashed changes
</div>


<script>
<<<<<<< Updated upstream
  
  const brands = {} 
  const allBrands = []
  let skusInfo = {} // Make skusInfo globally accessible

  // Function to fetch product by SKU using Shopify Storefront API
  async function getProductBySKU(sku) {
    const query = `
      query getProductBySKU($sku: String!) {
        products(first: 1, query: $sku) {
          edges {
            node {
              id
              title
              handle
              featuredImage {
                url
              }
              variants(first: 1) {
                edges {
                  node {
                    id
                    sku
                    price {
                      amount
                      currencyCode
                    }
                  }
                }
              }
            }
          }
        }
      }
    `;

    try {
      const response = await fetch(`${ENDPOINT}/api/2024-01/graphql.json`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Shopify-Storefront-Access-Token": ACCESS_TOKEN
        },
        body: JSON.stringify({ query, variables: { sku } })
      });

      const data = await response.json();

      if (data.errors) {
        console.error("GraphQL Errors:", data.errors);
        return null;
      }

      return data.data.products.edges;
    } catch (error) {
      console.error("Error fetching product:", error);
      return null;
    }
  }

  $( document ).ready(async function() {
    try {
      // Load both JSON files in parallel
      const [skuResponse, dataResponse] = await Promise.all([
        $.getJSON("{{ 'escova.json' | asset_url }}"),
        $.getJSON("{{ 'escova2.json' | asset_url }}")
      ]);

      // Process SKU data
      if (Array.isArray(skuResponse)) {
        skuResponse.forEach((data) => {
          if (data.SKU) {
            skusInfo[data.SKU] = data;
          }
        });
      }

      // Process brand data
      $('#brands').append($('<option>', { value: -1, text : "Selecione uma marca" }));

      if (dataResponse && dataResponse) {
        dataResponse.forEach((entry) => {
          if(!brands[entry["MARCA"]]){
            brands[entry["MARCA"]] = {}
          }
          if(!brands[entry["MARCA"]][entry["MODELO"]]) {
            brands[entry["MARCA"]][entry["MODELO"]] = {}
          }
          if(!brands[entry["MARCA"]][entry["MODELO"]][entry["ANO"]]) {
            brands[entry["MARCA"]][entry["MODELO"]][entry["ANO"]] = []
          }
          brands[entry["MARCA"]][entry["MODELO"]][entry["ANO"]].push(entry)

          if(!allBrands.includes(entry["MARCA"])){
            allBrands.push(entry["MARCA"])
            $('#brands').append($('<option>', { 
              value: entry["MARCA"],
              text : entry["MARCA"] 
            }));
          }
        });
      }

    } catch (error) {
      console.error("Error loading data:", error);
      $("#loading").html("Erro ao carregar os dados. Por favor, tente novamente.");
    }

    $( "#brands" ).on( "change", function() {
      const model = $( "#brands" ).val()

      $("#products-list-2 .product-item").remove()
      $("#product-list-container").css("display", "none");

      $('#models').find('option').remove().end()
      $('#vehicles').find('option').remove().end()

      $('#models').append($('<option>', { value: -1, text : "Selecione um modelo" }));

      const models = brands[model]

      Object.keys(models).map((model) => {
          $('#models').append($('<option>', { 
            value: model,
            text : model 
          }));
      })

    });

    $( "#models" ).on( "change", function() {
      const brandSelected = $( "#brands" ).val()
      const modelSelected = $( "#models" ).val()

      $("#products-list-2 .product-item").remove()
      $("#product-list-container").css("display", "none");

      $('#vehicles').find('option').remove().end()

      $('#vehicles').append($('<option>', { value: -1, text : "Selecione um ano" }));

      
      const years = brands[brandSelected][modelSelected]

      Object.keys(years).map((year) => {
          $('#vehicles').append($('<option>', { 
            value: year,
            text : year 
          }));
      })
    })

    $( "#vehicles" ).on( "change", async function() {
      $( "#loading" ).show()

      const brandSelected = $( "#brands" ).val()
      const modelSelected = $( "#models" ).val()
      const vehicleSelcted = $( "#vehicles" ).val()
    
      const vehiclesList = $("#products-list-2")
      vehiclesList.empty()
      $("#products-list-2 .product-item").remove()

      const vehicle = brands[brandSelected][modelSelected][vehicleSelcted][0]

      // Fetch product data for all available SKUs
      const skus = [
        vehicle["ESCOVA CLASSIC CONDUTOR"],
        vehicle["ESCOVA CLASSIC PASSAGEIRO"],
        vehicle["ESCOVA FLAT CONDUTOR"],
        vehicle["ESCOVA FLAT PASSAGEIRO"]
      ].filter(Boolean); // Remove any null/undefined values

      const productPromises = skus.map(sku => getProductBySKU(sku));
      const productResults = await Promise.all(productPromises);

      
      // Create a map of SKU to product information
      const productMap = {};
      productResults.forEach((result, index) => {
        if (result && result[0]) {
          productMap[skus[index]] = result[0].node;
        }
      });
      /*console.log("vehicle",vehicle)
      console.log("productResults",productResults)*/
      console.log("productMap",productMap)
      
      let itemsDriver = ""
      if(vehicle["ESCOVA CLASSIC CONDUTOR"] && vehicle["ESCOVA CLASSIC CONDUTOR"] !== ""){
        console.log("ESCOVA CLASSIC CONDUTOR")
        const product = productMap[vehicle["ESCOVA CLASSIC CONDUTOR"]];
        if (product) {
          itemsDriver = product
          
        }
      }

      let itemsPassenger = ""
      if(vehicle["ESCOVA CLASSIC PASSAGEIRO"] && vehicle["ESCOVA CLASSIC PASSAGEIRO"] !== ""){
        console.log("ESCOVA CLASSIC PASSAGEIRO")
        
        const product = productMap[vehicle["ESCOVA CLASSIC PASSAGEIRO"]];
        if (product) {
          itemsPassenger = product
          
        }
      }

      if(itemsDriver !== "" || itemsPassenger !== ""){
        const elem = `
          <div class="category">
            <div class="category-title">Escovas Classic</div>
            <div class="product-cards-container">
              ${itemsDriver !== "" ? `
                <div class="product-card" data-product='${JSON.stringify(itemsDriver)}'>
                  <div class="product-card-header">
                    <h3>Lado do Condutor</h3>
                  </div>
                  <div class="product-card-content">
                    <div class="product-card-image">
                      <img src="${itemsDriver.featuredImage.url}" alt="${itemsDriver.title}" />
                    </div>
                    <div class="product-card-details">
                      <div class="product-title">${itemsDriver.title}</div>
                      <div class="product-sku">
                        <a href="/${itemsDriver.handle}">${itemsDriver.variants.edges[0].node.sku}</a>
                      </div>
                      <div class="product-price d-none">
                        ${itemsDriver.variants.edges[0].node.price.amount} ${itemsDriver.variants.edges[0].node.price.currencyCode}
                      </div>
                    </div>
                  </div>
                  <div class="product-card-footer">
                    <div class="checkbox-container">
                      <input type="checkbox" class="checkbox-wiper-blade" id="checkbox-flat-driver" checked />
                      <label for="checkbox-flat-driver">Selecionar</label>
                    </div>
                  </div>
                </div>` : ""
              }
              ${itemsPassenger !== "" ? `
                <div class="product-card" data-product='${JSON.stringify(itemsPassenger)}'>
                  <div class="product-card-header">
                    <h3>Lado do Passageiro</h3>
                  </div>
                  <div class="product-card-content">
                    <div class="product-card-image">
                      <img src="${itemsPassenger.featuredImage.url}" alt="${itemsPassenger.title}" />
                    </div>
                    <div class="product-card-details">
                      <div class="product-title">${itemsPassenger.title}</div>
                      <div class="product-sku">
                        <a href="/${itemsPassenger.handle}">${itemsPassenger.variants.edges[0].node.sku}</a>
                      </div>
                      <div class="product-price d-none">
                        ${itemsPassenger.variants.edges[0].node.price.amount} ${itemsPassenger.variants.edges[0].node.price.currencyCode}
                      </div>
                    </div>
                  </div>
                  <div class="product-card-footer">
                    <div class="checkbox-container">
                      <input type="checkbox" class="checkbox-wiper-blade" id="checkbox-flat-passenger" checked />
                      <label for="checkbox-flat-passenger">Selecionar</label>
                    </div>
                  </div>
                </div>` : ""
              }
            </div>
            <div class="add-to-cart-container">
              <button class="btn btn-block primary adc adc-custom" id="category-classic">
                Adicionar ao carrinho
              </button>
            </div>
          </div>
        `;

        vehiclesList.append(elem);
      }

      let itemsDriverFlat = ""
      if(vehicle["ESCOVA FLAT CONDUTOR"] && vehicle["ESCOVA FLAT CONDUTOR"] !== ""){
        console.log("ESCOVA FLAT CONDUTOR")
        
        const product = productMap[vehicle["ESCOVA FLAT CONDUTOR"]];
        if (product) {
          itemsDriverFlat = product
          
        }
      }

      let itemsPassengerFlat = ""
      if(vehicle["ESCOVA FLAT PASSAGEIRO"] && vehicle["ESCOVA FLAT PASSAGEIRO"] !== ""){
        console.log("ESCOVA FLAT PASSAGEIRO")
        
        const product = productMap[vehicle["ESCOVA FLAT PASSAGEIRO"]];
        if (product) {
          itemsPassengerFlat = product
          
        }
      }

      console.log("itemsDriverFlat",itemsDriverFlat)
      console.log("itemsPassengerFlat",itemsPassengerFlat)
      
      if(itemsDriverFlat !== "" || itemsPassengerFlat !== ""){
        const elem = `
          <div class="category">
            <div class="category-title">Escovas Flat</div>
            <div class="product-cards-container">
              ${itemsDriverFlat !== "" ? `
                <div class="product-card" data-product='${JSON.stringify(itemsDriverFlat)}'>
                  <div class="product-card-header">
                    <h3>Lado do Condutor</h3>
                  </div>
                  <div class="product-card-content">
                    <div class="product-card-image">
                      <img src="${itemsDriverFlat.featuredImage.url}" alt="${itemsDriverFlat.title}" />
                    </div>
                    <div class="product-card-details">
                      <div class="product-title">${itemsDriverFlat.title}</div>
                      <div class="product-sku">
                        <a href="/${itemsDriverFlat.handle}">${itemsDriverFlat.variants.edges[0].node.sku}</a>
                      </div>
                      <div class="product-price d-none">
                        ${itemsDriverFlat.variants.edges[0].node.price.amount} ${itemsDriverFlat.variants.edges[0].node.price.currencyCode}
                      </div>
                    </div>
                  </div>
                  <div class="product-card-footer">
                    <div class="checkbox-container">
                      <input type="checkbox" class="checkbox-wiper-blade" id="checkbox-flat-driver" checked />
                      <label for="checkbox-flat-driver">Selecionar</label>
                    </div>
                  </div>
                </div>` : ""
              }
              ${itemsPassengerFlat !== "" ? `
                <div class="product-card" data-product='${JSON.stringify(itemsPassengerFlat)}'>
                  <div class="product-card-header">
                    <h3>Lado do Passageiro</h3>
                  </div>
                  <div class="product-card-content">
                    <div class="product-card-image">
                      <img src="${itemsPassengerFlat.featuredImage.url}" alt="${itemsPassengerFlat.title}" />
                    </div>
                    <div class="product-card-details">
                      <div class="product-title">${itemsPassengerFlat.title}</div>
                      <div class="product-sku">
                        <a href="/${itemsPassengerFlat.handle}">${itemsPassengerFlat.variants.edges[0].node.sku}</a>
                      </div>
                      <div class="product-price d-none">
                        ${itemsPassengerFlat.variants.edges[0].node.price.amount} ${itemsPassengerFlat.variants.edges[0].node.price.currencyCode}
                      </div>
                    </div>
                  </div>
                  <div class="product-card-footer">
                    <div class="checkbox-container">
                      <input type="checkbox" class="checkbox-wiper-blade" id="checkbox-flat-passenger" checked />
                      <label for="checkbox-flat-passenger">Selecionar</label>
                    </div>
                  </div>
                </div>` : ""
              }
            </div>
            <div class="add-to-cart-container">
              <button class="btn btn-block primary adc adc-custom" id="category-flat">
                Adicionar ao carrinho
              </button>
            </div>
          </div>
        `;

        $("#loading").hide();
        vehiclesList.append(elem);

        
      }

      $("#product-list-container").css("display", "block");

    })

  });

</script>

<style>
  #product-list-container {
    margin-top: 34px;
    max-width: 745px;
    margin: auto;
    padding: 12px;
  }
  .title {
    font-weight: 600;
  }

  .subtitle {
    color: #4A4A4A;
    font-weight: 400;
    margin: 12px;
  }

  .sku {
    color: #B0B0B0;
    font-weight: 300;
  }

  .products-search-layout {
    max-width: 745px;
    margin: 0 auto 50px auto;
    padding: 12px;
    padding-bottom: 1vh;
    padding-top: 2.5vh;
  }

  #products-list {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    gap: 20px;
  }

  @media only screen and (max-width: 600px) {
    #products-list {
      grid-template-columns: 1fr;
    }
  }

  #products-list .vehicle-item {
    width: 100%;
    margin-top: 24px;
    padding: 12px;
    text-align: center;
    overflow: hidden;
  }

  #products-list .vehicle-item img{
    width: 100%;
    object-fit: cover;
  }

  #products-list-2 .category{
    background: white;
    border: 1px solid #d1d1d1;
    padding: 15px;
    margin-bottom: 12px;
  }

  #products-list-2 .category .category-items{
    display: flex;
  }


  #products-list-2 .category .add-to-cart-container{
    display: flex;
    justify-content: flex-end;
    margin-top: 20px;
  }
  #products-list-2 .category .add-to-cart-container .adc-custom{
    width: 190px;
    font-size: 13px;
  }



  #products-list-2 .category .category-title{
    font-size: 20px;
    font-weight: bold;
    padding-bottom: 16px;
    color: #333!important;
  }

  #products-list-2 .category .category-items .category-items-image{
    width: 20%;
    margin-right: 20px;
    object-fit: contain;
  }

  #products-list-2 .category .category-items .category-acessories{
    width: 80%;
  }

  #products-list-2 .category .category-items .category-acessories table{
    width: 100%;
  }

  #products-list-2 .category .category-items .category-acessories tr{
    border-bottom: 1px solid black;
    padding: 10px;
    height: 36px;
  }

  #products-list-2 .category .category-items .category-acessories td a{
    color: #ff9800 !important;
    text-decoration: underline !important;
  }

  @media only screen and (max-width: 600px) {
    
    #products-list-2 .category .category-items{
      flex-direction: column;
    }

    #products-list-2 .category .category-items .category-items-image{
      width: 100%;
      margin-right: 0;
    }

    #products-list-2 .category .category-items .category-acessories{
      width: 100%;
    }

    #product-list-container{
      margin: 0;
      padding: 0;
    }
  }

.main-product-image:hover + .hover-product-image{
  opacity: 1;
  z-index: 9999;
}

.hover-product-image{
  opacity: 0;
  position: absolute;
  top: 0;
  left: 0;
  width: 260px;
  height: 260px;
  transform: translate(-130px, -130px);
  box-shadow: 0 0 24px -10px #e2e2e2;
  transition: all 250ms ease-in-out;
  z-index: -1;
}

@media only screen and (max-width: 600px) {
  .hover-product-image {
    transform: translate(0, -130px);
  }
}

.hover-product-image:hover{
  opacity: 1;
  z-index: 9999;
}

#loading{
  display: none;
  padding: 12px;
  text-align: center;
  margin-bottom: 60px;
}

.product-cards-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  margin: 20px 0;
}

.product-card {
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  overflow: hidden;
  transition: transform 0.2s ease-in-out;
}

.product-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.product-card-header {
  background: #f8f9fa;
  padding: 15px;
  border-bottom: 1px solid #eee;
}

.product-card-header h3 {
  margin: 0;
  color: #333;
  font-size: 18px;
}

.product-card-content {
  padding: 20px;
  display: flex;
  gap: 20px;
}

.product-card-image {
  flex: 0 0 120px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.product-card-image img {
  max-width: 100%;
  height: auto;
  object-fit: contain;
}

.product-card-details {
  flex: 1;
}

.product-title {
  font-weight: 600;
  margin-bottom: 10px;
  color: #333;
}

.product-sku {
  margin-bottom: 10px;
}

.product-sku a {
  color: #ff9800;
  text-decoration: none;
  font-size: 14px;
}

.product-adapter {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: #666;
}

.adapter-label {
  font-weight: 500;
}

.product-card-footer {
  padding: 15px;
  border-top: 1px solid #eee;
  background: #f8f9fa;
}

.checkbox-container {
  display: flex;
  align-items: center;
  gap: 8px;
}

.checkbox-container label {
  font-size: 14px;
  color: #666;
  cursor: pointer;
}

.checkbox-wiper-blade {
  width: 18px;
  height: 18px;
  cursor: pointer;
}

@media only screen and (max-width: 600px) {
  .product-cards-container {
    grid-template-columns: 1fr;
  }
  
  .product-card-content {
    flex-direction: column;
    align-items: center;
    text-align: center;
  }
  
  .product-card-image {
    flex: 0 0 auto;
  }
  
  .product-adapter {
    justify-content: center;
  }
}

</style>

=======
  var loading = true
  var cars
  var selectedBrand
  var selectedModel
  var selectedYear
  var initialClassic
  var initialFlat

  var brandToId
  var idToBrand

  var modelToId
  var idToModel

  var yearToId
  var idToYear

  var opts
  var adapt
  doMagic()
  function brandChanged(event) {
    const model = document.getElementById('modelodocarro')
    while (model.length > 1) {
        model.remove(1)
    }
    const year = document.getElementById('anodocarro')
    while (year.length > 1) {
      year.remove(1)
    }
    modelToId = {}
    idToModel = {}
    if (cars !== undefined) {
      const sel = cars[event.target.value]
      selectedBrand = event.target.value
      const url = new URLSearchParams(document.location.search)
      
      Object.keys(sel).forEach((car, index) => {
        const opt = document.createElement('option')

          // Add index to option_elem
          opt.value = car
  
          // Add element HTML
          opt.textContent = car
        if (index === Number(url.get('model')) && url.get('model') !== null && loading) {
          opt.selected = true
        }
        modelToId[car] = index
        idToModel[index] = car
        
          // Append option_elem to select_elem
          model.appendChild(opt);
      })
    }
    document.getElementById('optionClassic').outerHTML = initialClassic
    document.getElementById('optionFlat').outerHTML = initialFlat
  }
  function modelChanged(event) {
    const year = document.getElementById('anodocarro')
    while (year.length > 1) {
      year.remove(1)
    }
    if (cars !== undefined) {
      selectedModel = event.target.value
      const sel = cars[selectedBrand][event.target.value]
      const url = new URLSearchParams(document.location.search)
      yearToId = {}
      idToYear = {}

      Object.keys(sel).forEach((car, index) => {
        const opt = document.createElement('option')

          // Add index to option_elem
          opt.value = car
  
          // Add element HTML
          opt.textContent = car
        
        if (index === Number(url.get('year')) && url.get('year') !== null && loading) {
          opt.selected = true
        }
        yearToId[car] = index
        idToYear[index] = car
        
          // Append option_elem to select_elem
          year.appendChild(opt);
      })
    }
    document.getElementById('optionClassic').outerHTML = initialClassic
    document.getElementById('optionFlat').outerHTML = initialFlat
  }
  async function yearChanged(event) {
    selectedYear = event.target.value
    const car = cars[selectedBrand][selectedModel][selectedYear]
    const requests = { whatIs: [], p: [], image: [] }

    if (car[3] || car[4]) {
      if (car[3]) {
        requests.whatIs.push(["classic", "primary"])
        requests.p.push(getProduct(car[3]))
        requests.image.push(car[5])
      } else {
        requests.p.push(Promise.resolve())
        requests.image.push(car[5])
      }
      if (car[4]) {
        requests.whatIs.push(["classic", "secundary"])
        requests.p.push(getProduct(car[4]))
        requests.image.push(car[5])
      } else {
        requests.p.push(Promise.resolve())
        requests.image.push(car[5])
      }
    }
    
    if (car[6] || car[7]) {
      if (car[6]) {
        requests.whatIs.push(["flat", "primary"])
        requests.p.push(getProduct(car[6]))
        requests.image.push(car[8])
      } else {
        requests.p.push(Promise.resolve())
        requests.image.push(car[8])
      }
      if (car[7]) {
        requests.whatIs.push(["flat", "secundary"])
        requests.p.push(getProduct(car[7]))
        requests.image.push(car[8])
      } else {
        requests.p.push(Promise.resolve())
        requests.image.push(car[8])
      }
    }
    
    const ans = await Promise.all(requests.p)
    
    // what to do next: get all responses and fill up the 2 option groups
    let classicPage = initialClassic
    let flatPage = initialFlat
    opts = []
    // handle classic page
    if (ans[0] !== undefined) {
      const vari = ans[0].variants
      classicPage = classicPage.replace('img0101', ans[0].featured_image)
          .replace('nome0', ans[0].title)
          .replace(/skuskusku0/g, vari[0].sku)
          .replace('price1231230', (Number(ans[0].price) / 100).toFixed(2))
          .replace('UFGC0', requests.image[0])
          .replace('UFGI0', adapt[requests.image[0]])
      if (!ans[0].available) {
        classicPage = classicPage.replace('Adicionar ao carrinho1', 'esgotado')
      } else {
        classicPage = classicPage.replace('Adicionar ao carrinho1', 'Adicionar ao carrinho')
      }
      opts[0] = vari[0].id
    } else {
      classicPage = classicPage.replace('id="opt1"', 'hidden')
    }
    if (ans[1] !== undefined) {
      const vari = ans[1].variants
      classicPage = classicPage.replace('img0102', ans[1].featured_image)
          .replace('nome1', ans[1].title)
          .replace(/skuskusku1/g, vari[0].sku)
          .replace('price1231231', (Number(ans[1].price) / 100).toFixed(2))
          .replace('UFGC1', requests.image[1])
        .replace('UFGI1', adapt[requests.image[1]])
      if (!ans[1].available) {
        classicPage = classicPage.replace('Adicionar ao carrinho2', 'esgotado')
      } else {
        classicPage = classicPage.replace('Adicionar ao carrinho2', 'Adicionar ao carrinho')
      }
      opts[1] = vari[0].id
    } else {
      classicPage = classicPage.replace('id="opt2"', 'hidden')
    }
    if (ans[0] !== undefined || ans[1] !== undefined) {
      classicPage = classicPage.replace('hidden=""', '')
    }
    document.getElementById('optionClassic').outerHTML = classicPage
    
    if (ans[2] !== undefined) {
      const vari = ans[2].variants[0]
      flatPage = flatPage.replace('img0101', ans[2].featured_image)
          .replace('nome0', ans[2].title)
          .replace(/skuskusku0/g, vari.sku)
          .replace('price1231230', (Number(ans[2].price) / 100).toFixed(2))
          .replace('UFGC0', requests.image[2])
          .replace('UFGI0', adapt[requests.image[2]])
      if (!ans[2].available) {
        flatPage = flatPage.replace('Adicionar ao carrinho1', 'esgotado')
      } else {
        flatPage = flatPage.replace('Adicionar ao carrinho1', 'Adicionar ao carrinho')
      }
      opts[2] = vari.id
    } else {
      flatPage = flatPage.replace('id="opt3"', 'hidden')
    }
    if (ans[3] !== undefined) {
      const vari = ans[3].variants[0]
      flatPage = flatPage.replace('img0102', ans[3].featured_image)
          .replace('nome1', ans[3].title)
          .replace(/skuskusku1/g, vari.sku)
          .replace('price1231231', (Number(ans[3].price) / 100).toFixed(2))
          .replace('UFGC1', requests.image[3])
          .replace('UFGI1', adapt[requests.image[3]])
      if (!ans[3].available) {
        flatPage = flatPage.replace('Adicionar ao carrinho2', 'esgotado')
      } else {
        flatPage = flatPage.replace('Adicionar ao carrinho2', 'Adicionar ao carrinho')
      }
      opts[3] = vari.id
    } else {
      flatPage = flatPage.replace('id="opt4"', 'hidden')
    }
    if (ans[2] !== undefined || ans[3] !== undefined) {
      flatPage = flatPage.replace('hidden=""', '')
    }
    document.getElementById('optionFlat').outerHTML = flatPage
    const item0Price = ans[0] ? Number(ans[0].price) : 0
    const item1Price = ans[1] ? Number(ans[1].price) : 0

    const item2Price = ans[2] ? Number(ans[2].price) : 0
    const item3Price = ans[3] ? Number(ans[3].price) : 0

    setFirstChild(item0Price + item1Price <= item2Price + item3Price)

    setFirstChildEach('op1', item0Price <= item1Price ? 'opt1' : 'opt2')
    setFirstChildEach('op2', item2Price <= item3Price ? 'opt3' : 'opt4')
  }
  function getProduct(sku) {
    return new Promise((resolve, reject) => {
      let request = new XMLHttpRequest()
      request.open('GET', '/products/' + sku.split("|")[0] + '.js', false)
      request.send(null)
      if (request.status === 200) {
        const ans = JSON.parse(request.responseText)
        ans.vari = ans.variants.find(v => v.sku === sku.split("|")[1])
        resolve(ans)
      } else {
        reject(request.status)
      }
    })
  }
  function handleBuy(id) {
    console.log(id)
    const requestEntrie = [{
      id: opts[id],
      quantity: 1
    }]

    const request = new XMLHttpRequest()
    request.open('POST', '/cart/add.js') // , false
    request.setRequestHeader("Content-Type", "application/json")
    request.addEventListener("load", reqListener)
    request.send(JSON.stringify({ items: requestEntrie }))
  }
  function reqListener(env) {
    if (this.status !== 200) {
      alert("artigo esgotado")
    } else {
      const a = window.location.href.split('?')[0] + '?brand=' + brandToId[selectedBrand] + '&model=' + modelToId[selectedModel] + '&year=' + yearToId[selectedYear]
      window.location.href = a
      }
  }
  function doMagic() {
    httpGet("{{ 'limpaAdapter.csv' | asset_url }}", handleDataAdapter)
    httpGet("{{ 'outputLimpa.csv' | asset_url }}", handleData)
  }
  async function httpGet(URL, handler) {
    var xmlHttp = new XMLHttpRequest()
    xmlHttp.addEventListener("load", handler)
    xmlHttp.open( "GET", URL)
    
    xmlHttp.send( null )
  }
  function handleData() {
    const r = this.responseText.split('\n').map(line => line.split(',').map(value => value.trim()))
    const ccars = {}
    for (let i = 1; i < r.length; i++) {
      const carr = r[i]
      if (carr[0] === '') continue
      if (ccars[carr[0]] === undefined) {
        ccars[carr[0]] = {}
      }
      if (ccars[carr[0]][carr[1]] === undefined) {
        ccars[carr[0]][carr[1]] = {}
      }
      if (ccars[carr[0]][carr[1]][carr[2]] === undefined) {
        ccars[carr[0]][carr[1]][carr[2]] = carr
      }
    }
    cars = ccars
    const select_elem = document.getElementById('marcadocarro')
    const url = new URLSearchParams(document.location.search)
    brandToId = {}
    idToBrand = {}
    
    Object.keys(cars).forEach((element, index) => {
          const option_elem = document.createElement('option')

          // Add index to option_elem
          option_elem.value = element
  
          // Add element HTML
          option_elem.textContent = element
        
        if (Number(url.get('brand')) === index && url.get('brand') !== null && loading) {
          option_elem.selected = true
        }
        brandToId[element] = index
        idToBrand[index] = element
  
          // Append option_elem to select_elem
          select_elem.appendChild(option_elem)
    })
    
    initialClassic = document.getElementById('optionClassic').outerHTML
    initialFlat = document.getElementById('optionFlat').outerHTML

    if (url.get('brand')) {
      brandChanged({ target: { value: idToBrand[url.get('brand')] } })
      modelChanged({ target: { value: idToModel[url.get('model')] } })
      yearChanged({ target: { value: idToYear[url.get('year')] } })
    }
    loading = false
  }
  function handleDataAdapter() {
    const r = this.responseText.split('\n').map(line => line.split(',').map(value => value.trim()))
    const translator = {}
    for (let i = 1; i < r.length; i++) {
      const adapter = r[i]
      if (adapter[0] === '') continue
      translator[adapter[0]] = adapter[1]
    }
    adapt = translator
  }
  function setFirstChild(classicTop = true) {
    const topElement = classicTop
      ? document.getElementById("optionClassic")
      : document.getElementById("optionFlat");

    const parent = topElement.parentNode;
    parent.insertBefore(topElement, parent.firstChild);

    const a = document.getElementById("form_input_stuff")
    const parent2 = a.parentNode
    parent2.insertBefore(a, parent2.firstChild);
  }
  function setFirstChildEach(first, second) {
    const topElement = document.getElementById(second);

    const parent = topElement.parentNode;
    parent.insertBefore(topElement, parent.firstChild);

    const a = document.getElementById(first)
    const parent2 = a.parentNode
    parent2.insertBefore(a, parent2.firstChild);
  }
  
</script>
>>>>>>> Stashed changes
